---
name: Setup Python
description: Setups latest Python and installs dependencies

inputs:
  python-version:
    description: Python version to install
    default: '3'
  venv-dir:
    description: Directory for Python Virtual Env
    default: .venv
  working-directory:
    description: Action working directory
    default: .

outputs:
  python-version:
    description: Installed Python version
    value: ${{ steps.display-installed-versions.outputs.python-version }}
  package-manager-version:
    description: Installed Python Package Manager version
    value: ${{ steps.display-installed-versions.outputs.package-manager-version }}
  global-cache-file:
    description: Python Package Manager global cache
    value: ${{ steps.output-cache-files.outputs.global-cache }}
  jobs-cache-file:
    description: Python Package Manager jobs cache
    value: ${{ steps.output-cache-files.outputs.jobs-cache }}

runs:
  using: composite
  steps:
    - name: Detect version to install
      id: detect-version-to-install
      run: |
        echo
        echo "üè∑Ô∏è Detecting Python version to install"

        VERSION=$(cat .python-version 2>/dev/null || echo "$INPUT_VERSION")
        [ -f .python-version ] && echo "üìÑ Detected .python-version file with version: $VERSION"

        echo "üêç Detected Python version: $VERSION"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        INPUT_VERSION: ${{ inputs.python-version }}

    - name: Detect Cache type
      id: detect-cache-type
      run: |
        echo
        echo "üíæ Detecting Python cache type"
        shopt -s globstar nullglob

        if [ -f Pipfile.lock ]; then
          CACHE_TYPE="pipenv"
          CACHE_KEY_FILES="${{ inputs.working-directory }}/**/Pipfile.lock"
          CACHE_HASH=${{ hashFiles(format('{0}/**/Pipfile.lock', inputs.working-directory)) }}
        elif [ -f poetry.lock ] || grep -q '\[tool.poetry\]' pyproject.toml 2>/dev/null; then
          CACHE_TYPE="poetry"
          CACHE_KEY_FILES="${{ inputs.working-directory }}/**/poetry.lock"
          CACHE_HASH=${{ hashFiles(format('{0}/**/poetry.lock', inputs.working-directory)) }}
        else
          CACHE_TYPE="pip"
          CACHE_KEY_FILES="${{ inputs.working-directory }}/**/*requirements.txt
          ${{ inputs.working-directory }}/**/requirements-dev.txt"
          CACHE_HASH=${{
            hashFiles(
              format('{0}/**/*requirements.txt', inputs.working-directory),
              format('{0}/**/requirements-dev.txt', inputs.working-directory)
            )
          }}
        fi

        echo "üíæ Detected Python cache type: $CACHE_TYPE"
        echo "üíæ Detected Python cache key files: $CACHE_KEY_FILES"
        echo "üíæ Detected Python cache hash: $CACHE_HASH"
        echo "cache-type=$CACHE_TYPE" >> "$GITHUB_OUTPUT"
        echo "cache-key-files<<EOF" >> "$GITHUB_OUTPUT"
        echo "$CACHE_KEY_FILES" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        echo "cache-hash=$CACHE_HASH" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Load Cached Python dependencies
      uses: actions/cache@v4
      id: python-cache
      with:
        path: ${{ inputs.working-directory }}/${{ inputs.venv-dir }}
        key: ${{ env.CACHE-PREFIX }}-${{ env.HASH }}
      env:
        CACHE-PREFIX: setup-python-internal-${{ runner.os }}-${{ runner.arch }}-venv
        HASH: ${{ steps.detect-cache-type.outputs.cache-hash }}

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        # Reference for setup-python action options
        # https://github.com/actions/setup-python/blob/main/action.yml
        # https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md
        cache: ${{ env.CACHE_HIT == 'true' && '' || env.CACHE_TYPE }}
        check-latest: true
        python-version: ${{ env.VERSION }}
        cache-dependency-path: ${{ env.CACHE_PATH }}
      env:
        CACHE_HIT: ${{ steps.python-cache.outputs.cache-hit }}
        CACHE_PATH: ${{ steps.detect-cache-type.outputs.cache-key-files }}
        CACHE_TYPE: ${{ steps.detect-cache-type.outputs.cache-type }}
        VERSION: ${{steps.detect-version-to-install.outputs.version }}

    - name: Display installed Python and Pip versions
      id: display-installed-versions
      run: |
        echo
        PYTHON_VERSION=$(python -V | sed 's/^Python //')
        PM_VERSION=$(pip -V)
        echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "package-manager-version=$PM_VERSION" >> $GITHUB_OUTPUT
        echo "üêç Python version: $PYTHON_VERSION"
        echo "üêç Pip version: $PM_VERSION"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Output cache files
      id: output-cache-files
      run: |
        echo
        OS="${{ runner.os }}"
        ARCH="${{ runner.arch }}"
        ARCH_LOWER="$(echo "$ARCH" | tr '[:upper:]' '[:lower:]')"
        PM_CACHE="${{ steps.detect-cache-type.outputs.cache-type }}"
        OS_TAG=""
        if [ "$PM_CACHE" != "pipenv" ];
          . /etc/os-release
          OS_TAG="$VERSION_ID-$(echo "$NAME" | sed 's/ /-/g')-"
        fi
        PYTHON_VERSION="${{ steps.display-installed-versions.outputs.python-version }}"
        CACHE_HASH="${{ steps.detect-cache-type.outputs.cache-hash }}"

        GLOBAL_CACHE=setup-python-$OS-$ARCH_LOWER-$OS_TAGpython-$PYTHON_VERSION-$PM_CACHE-$CACHE_HASH
        JOBS_CACHE=setup-python-internal-$OS-$ARCH-venv-$CACHE_HASH

        echo "üíæ Global cache file: $GLOBAL_CACHE"
        echo "üíæ Jobs cache file: $JOBS_CACHE"

        echo "global-cache=$GLOBAL_CACHE" >> "$GITHUB_OUTPUT"
        echo "jobs-cache=$JOBS_CACHE" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Create Python Virtual Env
      if: steps.detect-cache-type.outputs.cache-type != 'pipenv'
      run: |
        echo
        if [ ! -d "${{ inputs.venv-dir }}" ]; then
          echo "üêç Creating Python Virtual Env"
          python -m venv ${{ inputs.venv-dir }}
        fi

        VENV_PATH="$(realpath "${{ inputs.venv-dir }}/bin")"
        echo "üêç Adding Python Virtual Env $VENV_PATH to PATH"
        echo "$VENV_PATH" >> $GITHUB_PATH
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Install Python Dependencies
      if: steps.python-cache.outputs.cache-hit != 'true'
      run: |
        echo
        if [ "$CACHE_TYPE" != "pipenv" ]; then
          echo "üêç Activating Python Virtual Env"
          . ${{ inputs.venv-dir }}/bin/activate
        fi

        echo
        echo "::group::üêç Installing dependencies"
        case "$CACHE_TYPE" in
          pipenv)
            mkdir -p "$HOME/.local/share/virtualenvs"
            pip install pipenv
            PIPENV_VENV_IN_PROJECT=1 pipenv install --dev
          ;;
          *) pip install $( [ -f requirements.txt ] && echo -r requirements.txt ) \
            $( [ -f requirements-dev.txt ] && echo -r requirements-dev.txt )
          ;;
        esac
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        CACHE_TYPE: ${{ steps.detect-cache-type.outputs.cache-type }}
