---
name: Setup Node
description: Setups latest Node LTS and installs dependencies

inputs:
  node-version:
    description: Node version to install
    default: '22'
  working-directory:
    description: Action working directory
    default: .

runs:
  using: composite
  steps:
    - name: Detect Node Package Manager
      id: detect-node-pm
      # Detect supported package managers by actions/setup-node
      # npm, pnpm, yarn1, yarn
      # https://github.com/actions/setup-node/blob/main/src/cache-utils.ts
      run: |
        if [ -f "yarn.lock" ]; then
          if [ -d ".yarn" ]; then
            echo "node-pm=yarn" >> $GITHUB_OUTPUT
            echo "node-cache=yarn" >> $GITHUB_OUTPUT
            echo "node-lock=yarn.lock" >> $GITHUB_OUTPUT
          else
            echo "node-pm=yarn1" >> $GITHUB_OUTPUT
            echo "node-cache=yarn" >> $GITHUB_OUTPUT
            echo "node-lock=yarn.lock" >> $GITHUB_OUTPUT
          fi
        elif [ -f "pnpm-lock.yaml" ]; then
          echo "node-pm=pnpm" >> $GITHUB_OUTPUT
          echo "node-cache=pnpm" >> $GITHUB_OUTPUT
          echo "node-lock=pnpm-lock.yaml" >> $GITHUB_OUTPUT
        else
          echo "node-pm=npm" >> $GITHUB_OUTPUT
          echo "node-cache=npm" >> $GITHUB_OUTPUT
          echo "node-lock=package-lock.json" >> $GITHUB_OUTPUT
        fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Display Node Package Manager
      run: |
        echo Package Manager Name: ${{ env.PM }}
        echo Package Manager Lock File: ${{ env.LOCK }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}
        LOCK: ${{ steps.detect-node-pm.outputs.node-lock }}

    - name: Load Cached NPM dependencies
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        path: |
          ${{ inputs.working-directory }}/node_modules
          ${{ inputs.working-directory }}/.yarn
        key: ${{ env.CACHE-PREFIX }}-${{ env.PM }}-${{ hashFiles(env.HASHED) }}
      env:
        CACHE-PREFIX: setup-node-internal-${{ runner.os }}-${{ runner.arch }}
        HASHED: ${{ inputs.working-directory }}/${{ steps.detect-node-pm.outputs.node-lock }}
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Enable Corepack
      run: |
        if [ $PM != "npm" ]; then
          corepack enable
        fi
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        # Reference for setup-node action options
        # https://github.com/actions/setup-node/blob/main/action.yml
        # https://github.com/actions/setup-node#usage
        cache: ${{ (env.CACHE-HIT != 'true' && env.CACHE) || '' }}
        cache-dependency-path: ${{ inputs.working-directory }}/${{ env.LOCK }}
        check-latest: true
        node-version: ${{ inputs.node-version }}
      env:
        LOCK: ${{ steps.detect-node-pm.outputs.node-lock }}
        CACHE: ${{ steps.detect-node-pm.outputs.node-cache }}
        CACHE-HIT: ${{ steps.node-modules-cache.outputs.cache-hit }}

    - name: Display Node version
      run: 'echo ::notice::Node.js version: $(node -v)'
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Display Package Manager version
      run: |
        echo "::group::ðŸ“¦ Display Package Manager version"
        VERSION=$(
          case "$PM" in
            yarn1|yarn) yarn -v ;;
            pnpm) pnpm -v ;;
            *) npm -v ;;
          esac
        )
        echo "::notice title=Package Manager Version::$PM version: $VERSION"
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Install Dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: |
        echo "::group::ðŸ“¦ Installing dependencies"
        case "$PM" in
          yarn1) yarn install --frozen-lockfile ;;
          yarn) yarn --immutable ;;
          pnpm) pnpm install --frozen-lockfile ;;
          *) npm ci ;;
        esac
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Check cached dependencies size
      run: find . -path "*/node_modules" -type d -prune -print | xargs -r du -sh
      shell: bash
      working-directory: ${{ inputs.working-directory }}
