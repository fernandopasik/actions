---
name: Setup Node
description: Setups latest Node LTS and installs dependencies

inputs:
  node-version:
    description: Node version to install
    default: lts
  working-directory:
    description: Action working directory
    default: .

runs:
  using: composite
  steps:
    - name: Detect Node.js version
      id: detect-node-version
      run: |
        NODE_VERSION=$(cat .node-version 2>/dev/null || cat .nvmrc 2>/dev/null || echo "${{ inputs.node-version }})
        NODE_VERSION=$(echo "$NODE_VERSION" | sed 's/^v//')

        echo "node-version=$NODE_VERSION" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Detect Node.js Package Manager
      id: detect-node-pm
      # Detect supported package managers by actions/setup-node
      # npm, pnpm, yarn1, yarn
      # https://github.com/actions/setup-node/blob/main/src/cache-utils.ts
      run: |
        echo
        CACHE_PATH=${{ inputs.working-directory }}/node_modules
        if [ -f "yarn.lock" ]; then
          if [ -d ".yarn" ] || [ -f ".yarnrc.yml" ]; then
            PM="yarn"
            CACHE_PATH="$CACHE_PATH\n${{ inputs.working-directory }}/.yarn"
          else
            PM="yarn1"
          fi
          CACHE="yarn"
          LOCK="yarn.lock"
        elif [ -f "pnpm-lock.yaml" ]; then
          PM="pnpm"
          CACHE="pnpm"
          LOCK="pnpm-lock.yaml"
        else
          PM="npm"
          CACHE="npm"
          LOCK="package-lock.json"
        fi

        echo "node-pm=$PM" >> "$GITHUB_OUTPUT"
        echo "node-cache=$CACHE" >> "$GITHUB_OUTPUT"
        echo "node-lock=$LOCK" >> "$GITHUB_OUTPUT"
        printf "cache-path<<EOF\n%s\nEOF\n" "$CACHE_PATH" >> "$GITHUB_OUTPUT"

        echo "::debug::--- üì¶ Node.js Package Manager ---"
        echo "::debug::Package Manager Name: $PM"
        echo "::debug::Package Manager Cache Type: $CACHE"
        echo "::debug::Package Manager Lock File: $LOCK"
        echo "::debug::Cache Paths:\n$CACHE_PATH"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Cache dependencies between jobs
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        path: ${{ env.CACHE-PATH }}
        key: ${{ env.CACHE-PREFIX }}-${{ RUNNER }}-${{ env.PM }}-${{ hashFiles(env.HASHED) }}
      env:
        CACHE-PATH: ${{ steps.detect-node-pm.outputs.cache-path }}
        CACHE-PREFIX: setup-node-${{ steps.detect-node-version.outputs.node-version }}-internal
        HASHED: ${{ inputs.working-directory }}/${{ steps.detect-node-pm.outputs.node-lock }}
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}
        RUNNER: ${{ runner.os }}-${{ runner.arch }}

    - name: Prepare Node.js
      if: ${{ env.PM != 'npm' && env.PM != 'yarn1' }}
      uses: actions/setup-node@v4
      with:
        check-latest: true
        node-version: ${{ steps.detect-node-version.outputs.node-version }}

    - name: Enable Corepack
      if: ${{ env.PM != 'npm' && env.PM != 'yarn1' }}
      run: |
        echo
        echo "üß∞ Enabling Corepack for $PM"
        corepack enable

        PM_VERSION=$(node -pe "try{require('./package.json').packageManager}catch{}")
        [ -z "$PM_VERSION" ] && PM_VERSION="$PM@latest"

        echo "üß∞ Preparing Corepack for $PM_VERSION"
        corepack prepare "$PM_VERSION" --activate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        # Reference for setup-node action options
        # https://github.com/actions/setup-node/blob/main/action.yml
        # https://github.com/actions/setup-node#usage
        cache: ${{ (env.CACHE-HIT != 'true' && env.CACHE) || '' }}
        cache-dependency-path: ${{ inputs.working-directory }}/${{ env.LOCK }}
        check-latest: true
        node-version: ${{ steps.detect-node-version.outputs.node-version }}
      env:
        LOCK: ${{ steps.detect-node-pm.outputs.node-lock }}
        CACHE: ${{ steps.detect-node-pm.outputs.node-cache }}
        CACHE-HIT: ${{ steps.node-modules-cache.outputs.cache-hit }}

    - name: Display Node.js and Package Manager versions
      run: |
        echo
        VERSION=$(
          case "$PM" in
            yarn1|yarn) yarn -v ;;
            pnpm) pnpm -v ;;
            *) npm -v ;;
          esac
        )
        echo "üì¶ Node.js version: $(node -v)"
        echo "üì¶ $PM version: $VERSION"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Install Dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: |
        echo
        echo "::group::üì¶ Installing dependencies"
        case "$PM" in
          yarn1) yarn install --frozen-lockfile ;;
          yarn) yarn --immutable ;;
          pnpm) pnpm install --frozen-lockfile ;;
          *) npm ci ;;
        esac
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        PM: ${{ steps.detect-node-pm.outputs.node-pm }}

    - name: Calculate dependencies size
      run: |
        echo
        echo "‚öñÔ∏è Calculating dependencies size"

        find . -path "*/node_modules" -type d -prune -print | \
        xargs -r du -sm | \
        sort -nr | \
        while read -r size path; do
          printf "\033[1;35m %4sM \033[0m %s\n" "$size" "$path"
        done
      shell: bash
      working-directory: ${{ inputs.working-directory }}
